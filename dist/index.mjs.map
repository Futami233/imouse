{"version":3,"file":"index.mjs","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface IMouseProps {\n    defaultBackgroundColor?: string;\n    activeBackgroundColor?: string;\n    defaultSize?: number;\n    activeSize?: number;\n    hoverPadding?: number;\n    activePadding?: number;\n    hoverRadius?: number;\n    activeRadius?: number;\n    selectionWidth?: number;\n    selectionHeight?: number;\n    selectionRadius?: number;\n    hoverSelector?: string;\n    transitionDuration?: number;\n    blurRadius?: number;\n    style?: React.CSSProperties;\n}\n\nclass IMouseState {\n    isVisible = false;\n    isActive = false;\n    isSelection = false;\n    hoverTarget: HTMLElement;\n    cursorLeft = 0;\n    cursorTop = 0;\n}\n\nexport default class IMouse extends React.Component<IMouseProps, IMouseState> {\n\n    static instance: IMouse | Promise<IMouse> = null;\n\n    static MOUNTPOINT_CLASS = 'imouse-mountpoint';\n\n    static defaultProps: IMouseProps = {\n        defaultBackgroundColor: 'rgba(0, 0, 0, .2)',\n        activeBackgroundColor: 'rgba(0, 0, 0, .4)',\n        defaultSize: 20,\n        activeSize: 15,\n        hoverPadding: 10,\n        hoverRadius: 10,\n        activePadding: 5,\n        activeRadius: 5,\n        selectionWidth: 3,\n        selectionHeight: 40,\n        selectionRadius: 2,\n        hoverSelector: 'a',\n        transitionDuration: 200,\n        blurRadius: 10,\n        style: {},\n    }\n\n    static getMountpoint() {\n        let mountpoint = document.querySelector('.' + this.MOUNTPOINT_CLASS);\n        if (mountpoint == null) {\n            mountpoint = document.createElement('div');\n            mountpoint.className = this.MOUNTPOINT_CLASS;\n            document.body.appendChild(mountpoint);\n        }\n        return mountpoint;\n    }\n\n    static async init(props: IMouseProps = {}) {\n        if (this.instance != null) {\n            return this.instance;\n        }\n        return this.instance = new Promise(resolve => {\n            ReactDOM.render(<IMouse {...props} ref={resolve} />, this.getMountpoint())\n        });\n    }\n\n    constructor(props: IMouseProps) {\n        super(props);\n        this.state = new IMouseState();\n    }\n\n    componentDidMount() {\n        IMouse.instance = this;\n\n        document.body.addEventListener('mousemove', this.handleMouseMove);\n        document.body.addEventListener('mouseover', this.handleMouseOver);\n        document.body.addEventListener('mouseleave', this.handleMouseLeave);\n        document.body.addEventListener('mousedown', this.handleMouseDown);\n        document.body.addEventListener('mouseup', this.handleMouseUp);\n        document.body.addEventListener('dragstart', this.handleDragStart);\n    }\n\n    componentWillUnmount() {\n        IMouse.instance = null;\n        \n        document.body.removeEventListener('mousemove', this.handleMouseMove);\n        document.body.removeEventListener('mouseover', this.handleMouseOver);\n        document.body.removeEventListener('mouseleave', this.handleMouseLeave);\n        document.body.removeEventListener('mousedown', this.handleMouseDown);\n        document.body.removeEventListener('mouseup', this.handleMouseUp);\n        document.body.removeEventListener('dragstart', this.handleDragStart);\n    }\n\n    handleMouseMove = (e: MouseEvent) => {\n        const { pageX, pageY } = e;\n        const left = pageX - window.scrollX;\n        const top = pageY - window.scrollY;\n        this.setState({\n            isVisible: true,\n            cursorLeft: left,\n            cursorTop: top,\n            isSelection: !document.getSelection().isCollapsed\n        });\n    }\n\n    handleMouseOver = (e: MouseEvent) => {\n        const { target } = e;\n        if (this.state.hoverTarget !== target) {\n            if (target instanceof HTMLElement && target.matches(this.props.hoverSelector)) {\n                this.setState({ hoverTarget: target });\n            } else {\n                this.setState({ hoverTarget: null });\n            }\n        }\n    }\n\n    handleMouseLeave = () => {\n        this.setState({ isVisible: false });\n    }\n\n    handleMouseDown = () => {\n        this.setState({ isActive: true });\n    }\n\n    handleMouseUp = () => {\n        this.setState({\n            isActive: false,\n            isSelection: !document.getSelection().isCollapsed\n        });\n    }\n\n    handleDragStart = (e: MouseEvent) => {\n        e.preventDefault();\n    }\n\n    getStyles() {\n        const {\n            defaultBackgroundColor, activeBackgroundColor,\n            defaultSize, activeSize,\n            hoverPadding, activePadding,\n            hoverRadius, activeRadius,\n            selectionWidth, selectionHeight, selectionRadius,\n            transitionDuration, blurRadius,\n            style\n        } = this.props;\n\n        const {\n            isVisible, isActive, isSelection, hoverTarget,\n            cursorLeft, cursorTop,\n        } = this.state;\n\n        const styles: React.CSSProperties = {\n            ...style,\n            position: 'fixed',\n            cursor: 'none',\n            zIndex: 10000000,\n            pointerEvents: 'none',\n            opacity: isVisible ? 1 : 0,\n            backgroundColor: isActive ? activeBackgroundColor : defaultBackgroundColor,\n            transformOrigin: 'center',\n            transitionDuration: transitionDuration + 'ms',\n            transitionProperty: 'width, height, transform, border-radius, background-color, backdrop-filter, -webkit-backdrop-filter',\n        };\n\n        if (hoverTarget) {\n            const targetRect = hoverTarget.getBoundingClientRect();\n            const padding = isActive ? activePadding : hoverPadding;\n            const radius = isActive ? activeRadius : hoverRadius;\n            const centerX = targetRect.left + targetRect.width / 2;\n            const centerY = targetRect.top + targetRect.height / 2;\n            const width = targetRect.width + padding * 2;\n            const height = targetRect.height + padding * 2;\n            styles.left = cursorLeft + 'px';\n            styles.top = cursorTop + 'px';\n            styles.width = width + 'px';\n            styles.height = height + 'px';\n            styles.transform = `translate(${ centerX - cursorLeft - width / 2 }px,${ centerY - cursorTop - height / 2 }px)`;\n            styles.borderRadius = radius + 'px';\n        } else if (isSelection) {\n            styles.left = cursorLeft + 'px';\n            styles.top = cursorTop + 'px';\n            styles.width = selectionWidth + 'px';\n            styles.height = selectionHeight + 'px';\n            styles.transform = `translate(${ -selectionWidth / 2 }px,${ -selectionHeight / 2 }px)`;\n            styles.borderRadius = selectionRadius + 'px';\n            styles.backdropFilter = `blur(${ blurRadius }px)`;\n            styles.WebkitBackdropFilter = `blur(${ blurRadius }px)`;\n        } else {\n            const size = isActive ? activeSize : defaultSize;\n            const radius = size / 2;\n            styles.left = cursorLeft + 'px';\n            styles.top = cursorTop + 'px';\n            styles.width = size + 'px';\n            styles.height = size + 'px';\n            styles.transform = `translate(${ -radius }px,${ -radius }px)`;\n            styles.borderRadius = radius + 'px';\n            styles.backdropFilter = `blur(${ blurRadius }px)`;\n            styles.WebkitBackdropFilter = `blur(${ blurRadius }px)`;\n        }\n\n        return styles;\n    }\n\n    render() {\n        return <>\n            <div style={this.getStyles()}></div>\n            <style>{':root, * { cursor: none !important; }'}</style>\n        </>\n    }\n\n    destroy() {\n        const mountpoint = IMouse.getMountpoint();\n        ReactDOM.unmountComponentAtNode(mountpoint);\n        document.body.removeChild(mountpoint);\n    }\n}"],"names":["IMouseState","constructor","IMouse","props","e","pageX","left","window","scrollX","top","scrollY","setState","isVisible","cursorLeft","cursorTop","isSelection","document","getSelection","isCollapsed","target","this","state","hoverTarget","HTMLElement","matches","hoverSelector","isActive","preventDefault","getMountpoint","mountpoint","querySelector","MOUNTPOINT_CLASS","createElement","className","body","appendChild","init","_this","instance","Promise","resolve","ReactDOM","render","React","ref","componentDidMount","addEventListener","handleMouseMove","handleMouseOver","handleMouseLeave","handleMouseDown","handleMouseUp","handleDragStart","componentWillUnmount","removeEventListener","getStyles","styles","Object","position","cursor","zIndex","pointerEvents","opacity","backgroundColor","transformOrigin","transitionDuration","transitionProperty","targetRect","getBoundingClientRect","padding","activePadding","hoverPadding","radius","activeRadius","hoverRadius","centerX","width","centerY","height","transform","borderRadius","selectionWidth","selectionHeight","selectionRadius","backdropFilter","blurRadius","WebkitBackdropFilter","size","activeSize","defaultSize","style","destroy","unmountComponentAtNode","removeChild","defaultBackgroundColor","activeBackgroundColor"],"mappings":"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"}